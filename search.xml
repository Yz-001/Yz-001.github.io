<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Js继承</title>
      <link href="/2022/06/02/jsInherit/"/>
      <url>/2022/06/02/jsInherit/</url>
      
        <content type="html"><![CDATA[<h4 id="每个函数都有-prototype-原型对象。"><a href="#每个函数都有-prototype-原型对象。" class="headerlink" title="每个函数都有 prototype===原型对象。"></a>每个函数都有 prototype===原型对象。</h4><h4 id="函数实例化后，-proto-属性，指向原型对象"><a href="#函数实例化后，-proto-属性，指向原型对象" class="headerlink" title="函数实例化后，__proto__属性，指向原型对象"></a>函数实例化后，__proto__属性，指向原型对象</h4><h4 id="属性封装在构造函数中-function-A-name-this-name-name"><a href="#属性封装在构造函数中-function-A-name-this-name-name" class="headerlink" title="属性封装在构造函数中  function A(name){this.name=name}"></a>属性封装在构造函数中  function A(name){this.name=name}</h4><h4 id="方法定义在原型对象上-xxx-prototype-say-function-xxx"><a href="#方法定义在原型对象上-xxx-prototype-say-function-xxx" class="headerlink" title="方法定义在原型对象上  xxx.prototype.say=function(){xxx}"></a>方法定义在原型对象上  xxx.prototype.say=function(){xxx}</h4><h3 id="1-原型链继承【复用】"><a href="#1-原型链继承【复用】" class="headerlink" title="1.原型链继承【复用】"></a>1.原型链继承【复用】</h3><h4 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h4><h4 id="复用，因为会继承"><a href="#复用，因为会继承" class="headerlink" title="复用，因为会继承"></a>复用，因为会继承</h4><h4 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h4><h4 id="1-无法给父构造函数传参"><a href="#1-无法给父构造函数传参" class="headerlink" title="1.无法给父构造函数传参"></a>1.无法给父构造函数传参</h4><h4 id="2-原型内的属性会被共享（基础数据类型不会继承改变，复杂数据类型会-数组，对象-）"><a href="#2-原型内的属性会被共享（基础数据类型不会继承改变，复杂数据类型会-数组，对象-）" class="headerlink" title="2.原型内的属性会被共享（基础数据类型不会继承改变，复杂数据类型会(数组，对象)）"></a>2.原型内的属性会被共享（基础数据类型不会继承改变，复杂数据类型会(数组，对象)）</h4><h4 id="实现："><a href="#实现：" class="headerlink" title="实现："></a>实现：</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">xxx.prototype=new xxx()</span><br><span class="line"></span><br><span class="line">B.prototype=new A()</span><br></pre></td></tr></table></figure><h3 id="2-构造函数【传参】"><a href="#2-构造函数【传参】" class="headerlink" title="2.构造函数【传参】"></a>2.构造函数【传参】</h3><h4 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h4><h4 id="构造属性继承，还能继承多个构造函数（call多个）"><a href="#构造属性继承，还能继承多个构造函数（call多个）" class="headerlink" title="构造属性继承，还能继承多个构造函数（call多个）"></a>构造属性继承，还能继承多个构造函数（call多个）</h4><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><h4 id="不会继承方法，只纯纯继承构造函数"><a href="#不会继承方法，只纯纯继承构造函数" class="headerlink" title="不会继承方法，只纯纯继承构造函数"></a>不会继承方法，只纯纯继承构造函数</h4><h4 id="xxx-prototype-say-function-xxx-就是无"><a href="#xxx-prototype-say-function-xxx-就是无" class="headerlink" title="xxx.prototype.say=function(){xxx}  就是无"></a>xxx.prototype.say=function(){xxx}  就是无</h4><h6 id="实现：xxx-call-this-xxx…"><a href="#实现：xxx-call-this-xxx…" class="headerlink" title="实现：xxx.call(this,xxx…)"></a>实现：xxx.call(this,xxx…)</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">function A(name,age)&#123;</span><br><span class="line"></span><br><span class="line">   this.name=name</span><br><span class="line"></span><br><span class="line">   this.age=age</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">function B(name,age)&#123;</span><br><span class="line"></span><br><span class="line">   A.call(this,name,age)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="3-组合继承【传参，复用】"><a href="#3-组合继承【传参，复用】" class="headerlink" title="3.组合继承【传参，复用】"></a>3.组合继承【传参，复用】</h3><h4 id="结合原型链继承-构造函数方法"><a href="#结合原型链继承-构造函数方法" class="headerlink" title="结合原型链继承+构造函数方法"></a>结合原型链继承+构造函数方法</h4><h4 id="优点：-2"><a href="#优点：-2" class="headerlink" title="优点："></a>优点：</h4><h4 id="可以继承父类原型上的属性，可以传参，可复用，每个新实例引入的构造函数属性是私有的。"><a href="#可以继承父类原型上的属性，可以传参，可复用，每个新实例引入的构造函数属性是私有的。" class="headerlink" title="可以继承父类原型上的属性，可以传参，可复用，每个新实例引入的构造函数属性是私有的。"></a>可以继承父类原型上的属性，可以传参，可复用，每个新实例引入的构造函数属性是私有的。</h4><h4 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h4><h4 id="调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。"><a href="#调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。" class="headerlink" title="调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。"></a>调用了两次父类构造函数（耗内存），子类的构造函数会代替原型上的那个父类构造函数。</h4><h6 id="实现：-1"><a href="#实现：-1" class="headerlink" title="实现："></a>实现：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function B(name,age)&#123;</span><br><span class="line"></span><br><span class="line">   A.call(this,name,age)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.prototype=new A()</span><br></pre></td></tr></table></figure><h5 id=""><a href="#" class="headerlink" title=""></a></h5><h3 id="4-寄生组合继承-常用"><a href="#4-寄生组合继承-常用" class="headerlink" title="4.寄生组合继承(常用)"></a>4.寄生组合继承(常用)</h3><h4 id="创建一个对象只想-A-prototype-，这样修改就不影响B的prototype"><a href="#创建一个对象只想-A-prototype-，这样修改就不影响B的prototype" class="headerlink" title="创建一个对象只想(A.prototype)，这样修改就不影响B的prototype"></a>创建一个对象只想(A.prototype)，这样修改就不影响B的prototype</h4><h4 id="instanceof-判断元素是否在另一个元素的原型链上"><a href="#instanceof-判断元素是否在另一个元素的原型链上" class="headerlink" title="instanceof  判断元素是否在另一个元素的原型链上"></a>instanceof  判断元素是否在另一个元素的原型链上</h4><h6 id="实现：-2"><a href="#实现：-2" class="headerlink" title="实现："></a>实现：</h6><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">function B(name,age)&#123;</span><br><span class="line"></span><br><span class="line">   A.call(this,name,age)</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">B.prototype=Object.create(A.prototype)</span><br></pre></td></tr></table></figure><h3 id="5-原型式继承"><a href="#5-原型式继承" class="headerlink" title="5.原型式继承"></a>5.原型式继承</h3><h4 id="重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object-create-就是这个原理。"><a href="#重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object-create-就是这个原理。" class="headerlink" title="重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。"></a>重点：用一个函数包装一个对象，然后返回这个函数的调用，这个函数就变成了个可以随意增添属性的实例或对象。object.create()就是这个原理。</h4><h4 id="特点：类似于复制一个对象，用函数来包装。"><a href="#特点：类似于复制一个对象，用函数来包装。" class="headerlink" title="特点：类似于复制一个对象，用函数来包装。"></a>特点：类似于复制一个对象，用函数来包装。</h4><h4 id="缺点：1、所有实例都会继承原型上的属性。"><a href="#缺点：1、所有实例都会继承原型上的属性。" class="headerlink" title="缺点：1、所有实例都会继承原型上的属性。"></a>缺点：1、所有实例都会继承原型上的属性。</h4><h4 id="2、无法实现复用。（新实例属性都是后面添加的）"><a href="#2、无法实现复用。（新实例属性都是后面添加的）" class="headerlink" title="2、无法实现复用。（新实例属性都是后面添加的）"></a>2、无法实现复用。（新实例属性都是后面添加的）</h4><h5 id="-1"><a href="#-1" class="headerlink" title=""></a></h5>]]></content>
      
      
      <categories>
          
          <category> 基础 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue组件通信</title>
      <link href="/2022/06/02/vueComponentCommuni/"/>
      <url>/2022/06/02/vueComponentCommuni/</url>
      
        <content type="html"><![CDATA[<h3 id="一-兄弟组件传值EventBus"><a href="#一-兄弟组件传值EventBus" class="headerlink" title="一. 兄弟组件传值EventBus"></a>一. 兄弟组件传值EventBus</h3><h4 id="发送"><a href="#发送" class="headerlink" title="发送"></a>发送</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$EventBus</span>.$emit(<span class="string">&#x27;name&#x27;</span>, value)</span><br></pre></td></tr></table></figure><h4 id="接收"><a href="#接收" class="headerlink" title="接收"></a>接收</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="variable language_">this</span>.<span class="property">$EventBus</span>.$on(<span class="string">&#x27;name&#x27;</span>, <span class="function">(<span class="params">value</span>) =&gt;</span> &#123;</span><br><span class="line">   <span class="variable language_">this</span>.$nextTick(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">       ...</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="二-父子组件传值props-emit"><a href="#二-父子组件传值props-emit" class="headerlink" title="二. 父子组件传值props/$emit"></a>二. 父子组件传值props/$emit</h3><h4 id="父传子"><a href="#父传子" class="headerlink" title="父传子"></a>父传子</h4><h5 id="父组件使用属性绑定一个变量"><a href="#父组件使用属性绑定一个变量" class="headerlink" title="父组件使用属性绑定一个变量"></a>父组件使用属性绑定一个变量</h5><h5 id="子组件用props接收（与created同级）"><a href="#子组件用props接收（与created同级）" class="headerlink" title="子组件用props接收（与created同级）"></a>子组件用props接收（与created同级）</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件发送</span></span><br><span class="line">&lt;components :data=<span class="string">&quot;data&quot;</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件接收</span></span><br><span class="line"><span class="attr">props</span>:&#123;</span><br><span class="line">    <span class="attr">data</span>:&#123;           </span><br><span class="line">      <span class="attr">type</span>:<span class="title class_">Array</span>,  <span class="comment">// 数据类型  多个类型[String, Number]</span></span><br><span class="line">      <span class="attr">require</span>:<span class="literal">true</span>,   <span class="comment">// 是否必填</span></span><br><span class="line">      <span class="attr">default</span>:<span class="function">() =&gt;</span> &#123; <span class="comment">// 默认</span></span><br><span class="line">        <span class="keyword">return</span> []</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子传父"><a href="#子传父" class="headerlink" title="子传父"></a>子传父</h4><h5 id="子组件使用this-emit绑定一个事件和值"><a href="#子组件使用this-emit绑定一个事件和值" class="headerlink" title="子组件使用this.$emit绑定一个事件和值"></a>子组件使用this.$emit绑定一个事件和值</h5><h5 id="父组件使用-子组件绑定事件-新方法名"><a href="#父组件使用-子组件绑定事件-新方法名" class="headerlink" title="父组件使用@子组件绑定事件=新方法名"></a>父组件使用@子组件绑定事件=新方法名</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//子组件发送</span></span><br><span class="line"><span class="variable language_">this</span>.$emit(<span class="string">&#x27;eventName&#x27;</span>, value)</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件接收</span></span><br><span class="line">&lt;components @eventName=<span class="string">&quot;xxx&quot;</span>&gt;</span><br></pre></td></tr></table></figure><h3 id="三-父子孙组件传值provide-inject（响应式）"><a href="#三-父子孙组件传值provide-inject（响应式）" class="headerlink" title="三. 父子孙组件传值provide/inject（响应式）"></a>三. 父子孙组件传值provide/inject（响应式）</h3><h6 id="2-2-0-新增"><a href="#2-2-0-新增" class="headerlink" title="2.2.0 新增"></a>2.2.0 新增</h6><h4 id="父组件"><a href="#父组件" class="headerlink" title="父组件"></a>父组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">provide () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">streetOption</span>: <span class="function">() =&gt;</span> <span class="variable language_">this</span>.<span class="property">streetOption</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">streetOption</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="keyword">async</span> created () &#123;</span><br><span class="line">   <span class="keyword">await</span> <span class="title function_">api</span>(<span class="string">&#x27;xxx&#x27;</span>).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="variable language_">this</span>.<span class="property">streetOption</span> = res</span><br><span class="line">   &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="子组件"><a href="#子组件" class="headerlink" title="子组件"></a>子组件</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">computed</span>: &#123;</span><br><span class="line">    getOption () &#123;</span><br><span class="line">      <span class="keyword">return</span> <span class="variable language_">this</span>.<span class="title function_">streetOption</span>()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">inject</span>: [<span class="string">&#x27;streetOption&#x27;</span>],</span><br><span class="line"> data () &#123;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">      <span class="attr">strArr</span>: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">watch</span>: &#123;</span><br><span class="line">    <span class="attr">getOption</span>: &#123;</span><br><span class="line">      handler (data) &#123;</span><br><span class="line">        <span class="variable language_">this</span>.<span class="property">strArr</span> = data</span><br><span class="line">      &#125;,</span><br><span class="line">      <span class="attr">immediate</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="attr">deep</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><h3 id="四-父子组件的双向绑定-sync"><a href="#四-父子组件的双向绑定-sync" class="headerlink" title="四. 父子组件的双向绑定.sync"></a>四. 父子组件的双向绑定.sync</h3><h6 id="2-3-0-新增"><a href="#2-3-0-新增" class="headerlink" title="2.3.0+ 新增"></a>2.3.0+ 新增</h6><h5 id="子组件改变了一个-prop-的值时，这个变化也会同步到父组件中所绑定，我们使用事件监听，实现起来比较长，所以使用-sync来进行缩写"><a href="#子组件改变了一个-prop-的值时，这个变化也会同步到父组件中所绑定，我们使用事件监听，实现起来比较长，所以使用-sync来进行缩写" class="headerlink" title="子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定，我们使用事件监听，实现起来比较长，所以使用.sync来进行缩写"></a>子组件改变了一个 prop 的值时，这个变化也会同步到父组件中所绑定，我们使用事件监听，实现起来比较长，所以使用.sync来进行缩写</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//父组件</span></span><br><span class="line">&lt;<span class="title class_">Child</span> :money=<span class="string">&quot;dataApp&quot;</span> v-<span class="attr">on</span>:<span class="attr">update</span>:money=<span class="string">&quot;dataApp = $event&quot;</span>/&gt; </span><br><span class="line">就相当于 </span><br><span class="line">&lt;<span class="title class_">Child</span> :money.<span class="property">sync</span>=<span class="string">&quot;dataApp&quot;</span>/&gt; 。</span><br><span class="line"></span><br><span class="line"><span class="comment">//子组件</span></span><br><span class="line">&lt;button @click=<span class="string">&#x27;$emit(&#x27;</span><span class="attr">update</span>:money<span class="string">&#x27;,money-100)&#x27;</span>&gt;&lt;/button&gt;</span><br></pre></td></tr></table></figure><h3 id="五-父子多层组件单向传参-attrs"><a href="#五-父子多层组件单向传参-attrs" class="headerlink" title="五. 父子多层组件单向传参$attrs"></a>五. 父子多层组件单向传参$attrs</h3><h6 id="2-4-0-新增"><a href="#2-4-0-新增" class="headerlink" title="2.4.0+ 新增"></a>2.4.0+ 新增</h6><h5 id="二次封装的组件可使用v-bind-”-attrs”"><a href="#二次封装的组件可使用v-bind-”-attrs”" class="headerlink" title="二次封装的组件可使用v-bind=”$attrs”"></a>二次封装的组件可使用v-bind=”$attrs”</h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//二次封装</span></span><br><span class="line">&lt;<span class="title class_">SecondChild</span> v-bind=<span class="string">&quot;$attrs&quot;</span>&gt;&lt;/<span class="title class_">SecondChild</span>&gt;</span><br><span class="line"></span><br><span class="line"><span class="comment">//父组件</span></span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">components</span> <span class="attr">name</span>=<span class="string">&quot;张三&quot;</span>&gt;</span></span></span><br><span class="line"><span class="language-xml"></span></span><br><span class="line"><span class="language-xml">//某子组件内调用</span></span><br><span class="line"><span class="language-xml">$attrs.name</span></span><br></pre></td></tr></table></figure><h3 id="五-多个组件使用vuex传值"><a href="#五-多个组件使用vuex传值" class="headerlink" title="五. 多个组件使用vuex传值"></a>五. 多个组件使用vuex传值</h3>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Jsdoc一个JavaScript API文档生成器</title>
      <link href="/2022/05/09/jsdoc/"/>
      <url>/2022/05/09/jsdoc/</url>
      
        <content type="html"><![CDATA[<h3 id="官网地址：https-github-com-jsdoc-jsdoc"><a href="#官网地址：https-github-com-jsdoc-jsdoc" class="headerlink" title="官网地址：https://github.com/jsdoc/jsdoc"></a>官网地址：<a href="https://github.com/jsdoc/jsdoc">https://github.com/jsdoc/jsdoc</a></h3><h3 id="一-jsdoc安装"><a href="#一-jsdoc安装" class="headerlink" title="一.  jsdoc安装"></a>一.  jsdoc安装</h3><ol><li><h4 id="npm全局安装"><a href="#npm全局安装" class="headerlink" title="npm全局安装"></a>npm全局安装</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g jsdoc</span><br></pre></td></tr></table></figure></li><li><h4 id="vscode安装jsdoc插件-在函数前输入-回车就会自动生成已有参数注释）"><a href="#vscode安装jsdoc插件-在函数前输入-回车就会自动生成已有参数注释）" class="headerlink" title="vscode安装jsdoc插件 在函数前输入/**回车就会自动生成已有参数注释）"></a>vscode安装jsdoc插件 在函数前输入/**回车就会自动生成已有参数注释）</h4></li></ol><h3 id="二-jsdoc执行"><a href="#二-jsdoc执行" class="headerlink" title="二.  jsdoc执行"></a>二.  jsdoc执行</h3><ul><li><h4 id="单文件编译"><a href="#单文件编译" class="headerlink" title="单文件编译"></a>单文件编译</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">jsdoc XXXX.js</span><br></pre></td></tr></table></figure><h4 id="结果：生成out文件"><a href="#结果：生成out文件" class="headerlink" title="结果：生成out文件"></a>结果：生成out文件</h4></li><li><h4 id="多文件运行（vue项目下全部js）"><a href="#多文件运行（vue项目下全部js）" class="headerlink" title="多文件运行（vue项目下全部js）"></a>多文件运行（vue项目下全部js）</h4></li></ul><h3 id="三-jsdoc编写规则（常用）"><a href="#三-jsdoc编写规则（常用）" class="headerlink" title="三.  jsdoc编写规则（常用）"></a>三.  jsdoc编写规则（常用）</h3><ul><li><h6 id="constructor-构造函数声明注释。"><a href="#constructor-构造函数声明注释。" class="headerlink" title="@constructor 构造函数声明注释。"></a><code>@constructor</code> 构造函数声明注释。</h6></li><li><h6 id="param-参数注释。"><a href="#param-参数注释。" class="headerlink" title="@param 参数注释。"></a><code>@param</code> 参数注释。</h6></li><li><h6 id="return-返回值注释。"><a href="#return-返回值注释。" class="headerlink" title="@return 返回值注释。"></a><code>@return</code> 返回值注释。</h6></li><li><h6 id="example-示例注释。"><a href="#example-示例注释。" class="headerlink" title="@example 示例注释。"></a><code>@example</code> 示例注释。</h6></li><li><h6 id="overview-对当前代码文件的描述。"><a href="#overview-对当前代码文件的描述。" class="headerlink" title="@overview 对当前代码文件的描述。"></a><code>@overview</code> 对当前代码文件的描述。</h6></li><li><h6 id="copyright-代码的版权信息。"><a href="#copyright-代码的版权信息。" class="headerlink" title="@copyright 代码的版权信息。"></a><code>@copyright</code> 代码的版权信息。</h6></li><li><h6 id="author-lt-name-gt-lt-emailAddress-gt-代码的作者信息。"><a href="#author-lt-name-gt-lt-emailAddress-gt-代码的作者信息。" class="headerlink" title="@author &lt;name&gt; [&lt;emailAddress&gt;] 代码的作者信息。"></a><code>@author &lt;name&gt; [&lt;emailAddress&gt;]</code> 代码的作者信息。</h6></li><li><h6 id="version-当前代码的版本。"><a href="#version-当前代码的版本。" class="headerlink" title="@version 当前代码的版本。"></a><code>@version</code> 当前代码的版本。</h6></li></ul><h3 id="四-示例"><a href="#四-示例" class="headerlink" title="四. 示例"></a>四. 示例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Book类 代表一本书.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@constructor</span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">title</span> - 本书的书名.</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> &#123;<span class="type">string</span>&#125; <span class="variable">author</span> - 本书的作者.</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">Book</span>(<span class="params">title, author</span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/** This is a description of the foo function. */</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">foo</span>(<span class="params"></span>) &#123;</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h6 id="执行结果为："><a href="#执行结果为：" class="headerlink" title="执行结果为："></a>执行结果为：</h6><img src="E:\gongzuo\Blog\source\_image\jsdoc\jsdoc_0.png" alt="图片加载失败" style="zoom:80%;" /><p><img src="E:\gongzuo\Blog\source_image\jsdoc\jsdoc_1.png" alt="jsdoc_1.png"></p>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用github+hexo快速搭建个人博客</title>
      <link href="/2022/04/20/createBlog/"/>
      <url>/2022/04/20/createBlog/</url>
      
        <content type="html"><![CDATA[<h3 id="Github官网地址：https-github-com"><a href="#Github官网地址：https-github-com" class="headerlink" title="Github官网地址：https://github.com/"></a>Github官网地址：<a href="https://github.com/">https://github.com/</a></h3><h3 id="Hexo官网地址-https-hexo-io-docs-configuration-html"><a href="#Hexo官网地址-https-hexo-io-docs-configuration-html" class="headerlink" title="Hexo官网地址:https://hexo.io/docs/configuration.html"></a>Hexo官网地址:<a href="https://hexo.io/docs/configuration.html">https://hexo.io/docs/configuration.html</a></h3><h2 id="初始搭建"><a href="#初始搭建" class="headerlink" title="初始搭建"></a>初始搭建</h2><h3 id="一-新建Git仓库配置"><a href="#一-新建Git仓库配置" class="headerlink" title="一.新建Git仓库配置"></a>一.新建Git仓库配置</h3><h4 id="仓库名：-用户名-github-io-其中-github-io-是固定写法"><a href="#仓库名：-用户名-github-io-其中-github-io-是固定写法" class="headerlink" title="仓库名：[用户名].github.io            其中.github.io/是固定写法"></a>仓库名：[用户名]<a href="https://yz-001.github.io/">.github.io </a>           其中<a href="https://yz-001.github.io/">.github.io/</a>是固定写法</h4><h4 id="权限：公有"><a href="#权限：公有" class="headerlink" title="权限：公有"></a>权限：公有</h4><h3 id="二-本地安装部署到Git"><a href="#二-本地安装部署到Git" class="headerlink" title="二.本地安装部署到Git"></a>二.本地安装部署到Git</h3><ol><li><h3 id="全局安装"><a href="#全局安装" class="headerlink" title="全局安装"></a>全局安装</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-cli -g </span><br></pre></td></tr></table></figure></li><li><h3 id="初始化"><a href="#初始化" class="headerlink" title="初始化"></a>初始化</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo init  </span><br></pre></td></tr></table></figure></li><li><h3 id="在根目录-config-yml修改git信息"><a href="#在根目录-config-yml修改git信息" class="headerlink" title="在根目录_config.yml修改git信息"></a>在根目录_config.yml修改git信息</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">deploye:  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">type</span>: &#x27;<span class="title">git</span>&#x27; </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">repository</span>: [刚创建的<span class="title">git</span>地址]  </span></span><br><span class="line"><span class="function"></span></span><br><span class="line"><span class="function">  <span class="title">branch</span>: [<span class="title">git</span>分支]  </span></span><br></pre></td></tr></table></figure></li><li><h3 id="安装Git的部署工具"><a href="#安装Git的部署工具" class="headerlink" title="安装Git的部署工具"></a>安装Git的部署工具</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-deployer-git -S</span><br></pre></td></tr></table></figure></li><li><h3 id="生成页面"><a href="#生成页面" class="headerlink" title="生成页面"></a>生成页面</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g </span><br></pre></td></tr></table></figure></li><li><h3 id="本地运行"><a href="#本地运行" class="headerlink" title="本地运行"></a>本地运行</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo s</span><br></pre></td></tr></table></figure></li><li><h3 id="上传到Git"><a href="#上传到Git" class="headerlink" title="上传到Git"></a>上传到Git</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo d </span><br></pre></td></tr></table></figure></li></ol><h3 id="三-打开网址-你的git用户名-github-io"><a href="#三-打开网址-你的git用户名-github-io" class="headerlink" title="三.打开网址[你的git用户名].github.io"></a>三.打开网址[你的git用户名].github.io</h3><h5 id="如果失败可以查看一下Settings-pages下的地址是否一致。"><a href="#如果失败可以查看一下Settings-pages下的地址是否一致。" class="headerlink" title="如果失败可以查看一下Settings/pages下的地址是否一致。"></a>如果失败可以查看一下Settings/pages下的地址是否一致。</h5><hr><h2 id="博客信息配置"><a href="#博客信息配置" class="headerlink" title="博客信息配置"></a>博客信息配置</h2><h4 id="在根目录-config-yml修改-（以下只展示修改的常见配置）"><a href="#在根目录-config-yml修改-（以下只展示修改的常见配置）" class="headerlink" title="在根目录_config.yml修改,（以下只展示修改的常见配置）"></a>在根目录_config.yml修改,（以下只展示修改的常见配置）</h4><hr><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">title: [&#x27;博客标题&#x27;]</span><br><span class="line">description: [&#x27;描述&#x27;]</span><br><span class="line">author: [博客作者]</span><br><span class="line">language: [语言]</span><br><span class="line">timezone: [时间]</span><br><span class="line"></span><br><span class="line"># Category &amp; Tag</span><br><span class="line">default_category: uncategorized</span><br><span class="line">category_map:</span><br><span class="line">[分类一]: [对应映射名]</span><br><span class="line">[分类二]: [对应映射名]</span><br><span class="line">tag_map:</span><br><span class="line">  [标签一]: [对应映射名] </span><br><span class="line">  [标签二]: [对应映射名] </span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="博客文章操作"><a href="#博客文章操作" class="headerlink" title="博客文章操作"></a>博客文章操作</h2><ol><li><h3 id="创建分页（分类，标签等方法相同）"><a href="#创建分页（分类，标签等方法相同）" class="headerlink" title="创建分页（分类，标签等方法相同）"></a>创建分页（分类，标签等方法相同）</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [创建的分页名]</span><br></pre></td></tr></table></figure><h4 id="如果是分类-标签或其他的导航栏链接，需在type设置对应值，比如标签对应tag"><a href="#如果是分类-标签或其他的导航栏链接，需在type设置对应值，比如标签对应tag" class="headerlink" title="如果是分类, 标签或其他的导航栏链接，需在type设置对应值，比如标签对应tag"></a>如果是分类, 标签或其他的导航栏链接，需在type设置对应值，比如标签对应tag</h4></li><li><h3 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo new [创建的文章名]</span><br></pre></td></tr></table></figure><h4 id="默认创建在根目录的-source-posts文件夹下，格式如下"><a href="#默认创建在根目录的-source-posts文件夹下，格式如下" class="headerlink" title="默认创建在根目录的/source/_posts文件夹下，格式如下"></a>默认创建在根目录的/source/_posts文件夹下，格式如下</h4><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line"><span class="function">title: [标题]</span></span><br><span class="line"><span class="function"><span class="title">date</span>: 2022-04-20 14:04:43</span></span><br><span class="line"><span class="function"><span class="title">categories</span>: [分类名]</span></span><br><span class="line"><span class="function"><span class="title">tags</span>: [标签名]</span></span><br><span class="line"><span class="function"><span class="title">cover</span>: [文章缩略图]</span></span><br><span class="line"><span class="function">---</span></span><br><span class="line"><span class="function">文章内容</span></span><br></pre></td></tr></table></figure><h4 id="可使用-Typora-exe-编译-md"><a href="#可使用-Typora-exe-编译-md" class="headerlink" title="可使用 Typora.exe 编译 md"></a>可使用 Typora.exe 编译 md</h4></li><li><h3 id="修改后的基本操作"><a href="#修改后的基本操作" class="headerlink" title="修改后的基本操作"></a>修改后的基本操作</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">hexo clean</span><br><span class="line">hexo g</span><br><span class="line">hexo d</span><br></pre></td></tr></table></figure><h4 id="对应清缓存，编译，上传，如果还会继续修改第三步可改为hexo-s运行。"><a href="#对应清缓存，编译，上传，如果还会继续修改第三步可改为hexo-s运行。" class="headerlink" title="对应清缓存，编译，上传，如果还会继续修改第三步可改为hexo s运行。"></a>对应清缓存，编译，上传，如果还会继续修改第三步可改为hexo s运行。</h4></li><li><h3 id="删除文章"><a href="#删除文章" class="headerlink" title="删除文章"></a>删除文章</h3><h4 id="在source-posts目录下删除一篇文章，然后执行上一点的修改后的基本操作"><a href="#在source-posts目录下删除一篇文章，然后执行上一点的修改后的基本操作" class="headerlink" title="在source/_posts目录下删除一篇文章，然后执行上一点的修改后的基本操作"></a>在source/_posts目录下删除一篇文章，然后执行上一点的修改后的基本操作</h4></li></ol><hr><h2 id="博客主题"><a href="#博客主题" class="headerlink" title="博客主题"></a>博客主题</h2><h3 id="一-选择主题-推荐以下-："><a href="#一-选择主题-推荐以下-：" class="headerlink" title="一.选择主题(推荐以下)："></a>一.选择主题(推荐以下)：</h3><h3 id="butterfly-https-github-com-jerryc127-hexo-theme-butterfly"><a href="#butterfly-https-github-com-jerryc127-hexo-theme-butterfly" class="headerlink" title="butterfly     https://github.com/jerryc127/hexo-theme-butterfly"></a>butterfly     <a href="https://github.com/jerryc127/hexo-theme-butterfly">https://github.com/jerryc127/hexo-theme-butterfly</a></h3><h3 id="fluid-https-github-com-fluid-dev-hexo-theme-fluid"><a href="#fluid-https-github-com-fluid-dev-hexo-theme-fluid" class="headerlink" title="fluid             https://github.com/fluid-dev/hexo-theme-fluid"></a>fluid             <a href="https://github.com/fluid-dev/hexo-theme-fluid">https://github.com/fluid-dev/hexo-theme-fluid</a></h3><h3 id="二-使用主题-下面以butterfly为例"><a href="#二-使用主题-下面以butterfly为例" class="headerlink" title="二.使用主题(下面以butterfly为例)"></a>二.使用主题(下面以butterfly为例)</h3><h3 id="1-安装butterfly"><a href="#1-安装butterfly" class="headerlink" title="1.安装butterfly"></a>1.安装butterfly</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b master https://github.com/jerryc127/hexo-theme-butterfly.git themes/butterfly</span><br></pre></td></tr></table></figure><h4 id="在博客代码根目录执行"><a href="#在博客代码根目录执行" class="headerlink" title="在博客代码根目录执行"></a>在博客代码根目录执行</h4><h3 id="2-安装butterfly的额外插件"><a href="#2-安装butterfly的额外插件" class="headerlink" title="2.安装butterfly的额外插件"></a>2.安装butterfly的额外插件</h3><figure class="highlight cmd"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i hexo-theme-butterfly</span><br></pre></td></tr></table></figure><h3 id="3-编辑根目录-config-yml修改主题"><a href="#3-编辑根目录-config-yml修改主题" class="headerlink" title="3.编辑根目录_config.yml修改主题"></a>3.编辑根目录_config.yml修改主题</h3><figure class="highlight yml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># Extensions</span></span><br><span class="line"><span class="comment">## Plugins: https://hexo.io/plugins/</span></span><br><span class="line"><span class="comment">## Themes: https://hexo.io/themes/</span></span><br><span class="line"><span class="attr">theme:</span> <span class="string">butterfly</span></span><br></pre></td></tr></table></figure><h4 id="把theme字段值修改为你在-themes下的文件名"><a href="#把theme字段值修改为你在-themes下的文件名" class="headerlink" title="把theme字段值修改为你在/themes下的文件名"></a>把theme字段值修改为你在/themes下的文件名</h4><h3 id="三-修改主题配置"><a href="#三-修改主题配置" class="headerlink" title="三.修改主题配置"></a>三.修改主题配置</h3><h4 id="修改-themes-butterfly-config-yml文件，可参考官方配置https-butterfly-js-org-posts-dc584b87-。"><a href="#修改-themes-butterfly-config-yml文件，可参考官方配置https-butterfly-js-org-posts-dc584b87-。" class="headerlink" title="修改/themes/butterfly/_config.yml文件，可参考官方配置https://butterfly.js.org/posts/dc584b87/。"></a>修改/themes/butterfly/_config.yml文件，可参考官方配置<a href="https://butterfly.js.org/posts/dc584b87/%E3%80%82">https://butterfly.js.org/posts/dc584b87/。</a></h4>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工具 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
